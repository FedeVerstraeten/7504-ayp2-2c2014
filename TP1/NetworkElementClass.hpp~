<<<<<<< local
=======
#ifndef NETWORK_ELEMENT_CLASS_HPP
#define NETWORK_ELEMENT_CLASS_HPP
>>>>>>> other

<<<<<<< local
=======
#include<iostream>
#include "common.hpp"

class errorsubindice
{
	public:
		errorsubindice()
		{
			cout<<"Mensaje emitido al crearse el objeto para la excepción \n Error de subíndice"<<endl;
		}
};


>>>>>>> other
class NetworkElement
{
	private:

		string name;
		string type;
		NetworkElement *father_;
<<<<<<< local
		NetworkElement *sons[];
<<<<<<< local
		string type;
=======
>>>>>>> other
=======
		NetworkElement **sons; // Será un punetro a un arreglo dinamico de punteros, lo declaro así ya que genera error declarar *sons[]
>>>>>>> other
		size_t numberSons;
<<<<<<< local

=======
>>>>>>> other

	public:
<<<<<<< local
        /**CONSTRUCTORES**/
        NetworkElement();
        NetworkElement(name, type); //crea un objeto asumiendo bien recibido el tipo y el nombre.
                          //Apunta los hijos y los padres a NULL.
                          // Luego cuando se lea connection se van a interconectar desde Connect().
=======

        /*********************** CONSTRUCTORES *********************************/
		NetworkElement();
		NetworkElement(const string,const string); // (NOMBRE, TIPO)

>>>>>>> other
		// ¿Debería poder copiarse los nodos?
		// Constructor por copia:
		NetworkElement(const NetworkElement&);
<<<<<<< local
		~NetworkElement();
=======
		~NetworkElement() { }
>>>>>>> other

<<<<<<< local
		/**SETTERS**/
		void setName(string n) {name=n;}; //es llamada por el constructor
		const string getName()const {return info;}
		void setType(string)
=======
        /*************************** SET & GET *********************************/
>>>>>>> other

<<<<<<< local
		/**GETTERS**/
		const NetworkElement *getFather()const {return father;}
		const NetworkElement *getSons()const {;}
/*
		void SetIzq( Nodoarbol *i){izq=i;}
		void SetDer( Nodoarbol *d){der=d;}
	*/
=======
		void setName (string n) {name=n;}
		void setType (string t) {type=t;}

		const string getName()const {return name;}
		const string getType()const {return type;}
		const NetworkElement* getFather()const {return father_;}
		const size_t getNumberSons() const {return numberSons;}		
		NetworkElement** getSons() const {return sons;} // Revisar no me deja el compilador retornar 'const NetworkElement**'
		const NetworkElement* getSons(const int)const;
		

		// getSons(): Sin argumentos, retorna el puntero al arreglo de punteros a NetworkElement hijos
		// getSons(int): Con argumentos, retorna el puntero de determinado hijo

		/************************** OPERADORES *********************************/

        NetworkElement& operator = (const NetworkElement &); // operador asignacion
        bool operator == (const NetworkElement&) const; // operador comparacion igualdad
		bool operator != (const NetworkElement&) const; // operador comparacion desigualdad

        /************************** MÉTODOS ************************************/

		// Se asume que se conecta al ingresar: hijo --> padre
        NetworkElement& connectToElement(NetworkElement&);
		void showContent();
		
>>>>>>> other
};
 #endif
